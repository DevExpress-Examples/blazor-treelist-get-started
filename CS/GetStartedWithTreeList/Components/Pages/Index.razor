@page "/"
@using GetStartedWithTreeList.Services
@attribute [StreamRendering(true)]
@rendermode InteractiveServer
@inject EmployeeTaskService TaskService

<DxTreeList Data="@Data"
            KeyFieldName="Id"
            ParentKeyFieldName="ParentId"
            ShowFilterRow="true"
            FilterTreeMode="TreeListFilterTreeMode.EntireBranch"
            EditModelSaving="TreeList_EditModelSaving"
            DataItemDeleting="TreeList_DataItemDeleting"
            CustomizeEditModel="TreeList_CustomizeEditModel">
    <Columns>
        <DxTreeListCommandColumn Width="200px" />
        <DxTreeListDataColumn FieldName="Name" Caption="Task" Width="40%" />
        <DxTreeListDataColumn FieldName="EmployeeName"
                              FilterRowValue='"John"'
                              FilterRowOperatorType="TreeListFilterRowOperatorType.Contains" />
        <DxTreeListDataColumn FieldName="StartDate" MinWidth="100" />
        <DxTreeListDataColumn FieldName="DueDate" MinWidth="100"
                              SortOrder="TreeListColumnSortOrder.Ascending" SortIndex="0" />
        <DxTreeListDataColumn FieldName="Progress" DisplayFormat="{0}%"
                              SortOrder="TreeListColumnSortOrder.Descending" SortIndex="1" />
    </Columns>
    <TotalSummary>
        <DxTreeListSummaryItem FieldName="Name" SummaryType="TreeListSummaryItemType.Count" />
        <DxTreeListSummaryItem FieldName="Progress" SummaryType="TreeListSummaryItemType.Avg" />
    </TotalSummary>
</DxTreeList>

@code {
    List<EmployeeTask> Data { get; set; }

    protected override void OnInitialized() {
        Data = TaskService.GenerateData();
    }
    void TreeList_CustomizeEditModel(TreeListCustomizeEditModelEventArgs e) {
        if (e.IsNew) {
            var newTask = (EmployeeTask)e.EditModel;
            newTask.Id = Data.Max(x => x.Id) + 1;
            if (e.ParentDataItem != null)
                newTask.ParentId = ((EmployeeTask)e.ParentDataItem).Id;
        }
    }
    async Task TreeList_EditModelSaving(TreeListEditModelSavingEventArgs e) {
        if (e.IsNew)
            Data.Add((EmployeeTask)e.EditModel);
        else
            e.CopyChangesToDataItem();
    }
    async Task TreeList_DataItemDeleting(TreeListDataItemDeletingEventArgs e) {
        Data.Remove((EmployeeTask)e.DataItem);
    }
}
